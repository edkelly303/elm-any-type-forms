module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)
-}

import Control
import Dict
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "Control"
            [ Test.describe
                "bool"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.bool
                                , deltas =
                                    [ Basics.True, Basics.False, Basics.True ]
                                }
                                |> Expect.equal (Result.Ok Basics.True)
                        )
                    ]
                ]
            , Test.describe
                "char"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test { control = Control.char, deltas = [] }
                                |> Expect.equal
                                    (Result.Err [ "Must not be blank" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.test
                                { control = Control.char, deltas = [ "hello" ] }
                                |> Expect.equal
                                    (Result.Err
                                        [ "Must be exactly one character" ]
                                    )
                        )
                    , Test.test
                        "2"
                        (\() ->
                            Control.test
                                { control = Control.char, deltas = [ "h" ] }
                                |> Expect.equal (Result.Ok 'h')
                        )
                    ]
                ]
            , Test.describe
                "dict"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = myDictControl__Control__dict_0
                                , deltas = []
                                }
                                |> Expect.equal (Result.Ok Dict.empty)
                        )
                    ]
                ]
            , Test.describe
                "enum"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = colourControl__Control__enum_0
                                , deltas =
                                    [ Red__Control__enum_0
                                    , Blue__Control__enum_0
                                    , Red__Control__enum_0
                                    , Green__Control__enum_0
                                    ]
                                }
                                |> Expect.equal
                                    (Result.Ok Green__Control__enum_0)
                        )
                    ]
                ]
            , Test.describe
                "float"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.float
                                , deltas = [ "hello" ]
                                }
                                |> Expect.equal
                                    (Result.Err [ "Must be a number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.test
                                { control = Control.float, deltas = [ "1.0" ] }
                                |> Expect.equal (Result.Ok 1)
                        )
                    ]
                ]
            , Test.describe
                "int"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.int, deltas = [ "1.5" ] }
                                |> Expect.equal
                                    (Result.Err [ "Must be a whole number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.test
                                { control = Control.int, deltas = [ "123" ] }
                                |> Expect.equal (Result.Ok 123)
                        )
                    ]
                ]
            , Test.describe
                "map"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = idControl__Control__map_0
                                , deltas = [ Control.mapping "1" ]
                                }
                                |> Expect.equal
                                    (Result.Ok (Id__Control__map_0 1))
                        )
                    ]
                ]
            , Test.describe
                "string"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.string
                                , deltas = [ "hello" ]
                                }
                                |> Expect.equal (Result.Ok "hello")
                        )
                    ]
                ]
            ]
        ]


myDictControl__Control__dict_0 =
    Control.dict Control.int Control.string


type Colour__Control__enum_0
    = Red__Control__enum_0
    | Green__Control__enum_0
    | Blue__Control__enum_0


colourControl__Control__enum_0 : Control.Control context Colour__Control__enum_0 Colour__Control__enum_0 Colour__Control__enum_0
colourControl__Control__enum_0 =
    Control.enum
        ( "Red", Red__Control__enum_0 )
        ( "Green", Green__Control__enum_0 )
        [ ( "Blue", Blue__Control__enum_0 ) ]


type Id__Control__map_0
    = Id__Control__map_0 Basics.Int


idControl__Control__map_0 =
    Control.map
        { convert = \i -> Id__Control__map_0 i
        , revert = \(Id__Control__map_0 i) -> i
        }
        Control.int
