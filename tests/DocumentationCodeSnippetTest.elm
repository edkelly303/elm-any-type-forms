module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)
-}

import Array
import Control
import Dict
import Expect
import Html
import Html.Attributes
import Html.Events
import Platform.Cmd
import Platform.Sub
import Set
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "Control"
            [ Test.describe
                "module header"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__Header_0.init
                                |> test__Control__Header_0.prefill
                                    { password = "hello"
                                    , confirmation = "world"
                                    }
                                |> test__Control__Header_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err [ "Passwords must match" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__Header_0.init
                                |> test__Control__Header_0.prefill
                                    { password = "openSesame"
                                    , confirmation = "openSesame"
                                    }
                                |> test__Control__Header_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Ok
                                        { password = "openSesame"
                                        , confirmation = "openSesame"
                                        }
                                    )
                        )
                    ]
                ]
            , Test.describe
                "alertAtIndexes"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__alertAtIndexes_0.init
                                |> test__Control__alertAtIndexes_0.prefill
                                    [ "hello", "world" ]
                                |> test__Control__alertAtIndexes_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err
                                        [ "List can't start with \"hello\" and \"world\"."
                                        , "List can't start with \"hello\" and \"world\"."
                                        ]
                                    )
                        )
                    ]
                ]
            , Test.describe
                "array"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Array_ String.String) (Control.Array_ String.String) (Array.Array Basics.Int)
                                unused =
                                    Control.array Control.int
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "bool"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__bool_0.init
                                |> test__Control__bool_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok Basics.False)
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__bool_0.init
                                |> test__Control__bool_0.update Basics.True
                                |> test__Control__bool_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok Basics.True)
                        )
                    ]
                ]
            , Test.describe
                "char"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__char_0.init
                                |> test__Control__char_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err [ "Must not be blank" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__char_0.init
                                |> test__Control__char_0.update "hello"
                                |> test__Control__char_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err
                                        [ "Must be exactly one character" ]
                                    )
                        )
                    , Test.test
                        "2"
                        (\() ->
                            (test__Control__char_0.init
                                |> test__Control__char_0.update "h"
                                |> test__Control__char_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok 'h')
                        )
                    ]
                ]
            , Test.describe
                "class"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                                        |> Control.class "important"
                                        |> Control.class "no-really"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "classList"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                                        |> Control.classList
                                            [ ( "important", Basics.True )
                                            , ( "no-really", Basics.True )
                                            , ( "ignore-me", Basics.False )
                                            ]
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "debounce"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string |> Control.debounce 2000
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "default"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__default_0.init
                                |> test__Control__default_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok ( 1, "hello" ))
                        )
                    ]
                ]
            , Test.describe
                "define"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__define_0.init
                                |> test__Control__define_0.update
                                    Increment__Control__define_0
                                |> test__Control__define_0.update
                                    Increment__Control__define_0
                                |> test__Control__define_0.update
                                    Decrement__Control__define_0
                                |> test__Control__define_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok 1)
                        )
                    ]
                ]
            , Test.describe
                "dict"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Dict_ String.String Basics.Bool) (Control.Dict_ String.String Basics.Bool) (Dict.Dict String.String Basics.Bool)
                                unused =
                                    Control.dict Control.string Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "enum"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__enum_0.init
                                |> test__Control__enum_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok Red__Control__enum_0)
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__enum_0.init
                                |> test__Control__enum_0.update
                                    Green__Control__enum_0
                                |> test__Control__enum_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Ok Green__Control__enum_0)
                        )
                    ]
                ]
            , Test.describe
                "failIf"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__failIf_0.init
                                |> test__Control__failIf_0.update "0"
                                |> test__Control__failIf_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err
                                        [ "This must be greater than zero!" ]
                                    )
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__failIf_0.init
                                |> test__Control__failIf_0.update "1"
                                |> test__Control__failIf_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok 1)
                        )
                    ]
                ]
            , Test.describe
                "failIfWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__failIfWithContext_0.init
                                |> test__Control__failIfWithContext_0.update "0"
                                |> test__Control__failIfWithContext_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err
                                        [ "This is less than the minimum value!"
                                        ]
                                    )
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__failIfWithContext_0.init
                                |> test__Control__failIfWithContext_0.update "1"
                                |> test__Control__failIfWithContext_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok 1)
                        )
                    ]
                ]
            , Test.describe
                "float"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__float_0.init
                                |> test__Control__float_0.update "hello"
                                |> test__Control__float_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err [ "Must be a number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__float_0.init
                                |> test__Control__float_0.update "1.0"
                                |> test__Control__float_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok 1)
                        )
                    ]
                ]
            , Test.describe
                "form"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Form String.String String.String Basics.Int Msg__Control__form_0
                                unused =
                                    Control.form
                                        { control = Control.int
                                        , onUpdate =
                                            FormUpdated__Control__form_0
                                        , view =
                                            \controlView ->
                                                Html.form
                                                    [ Html.Events.onSubmit
                                                        FormSubmitted__Control__form_0
                                                    ]
                                                    (controlView
                                                        ++ [ Html.button
                                                                [ Html.Attributes.type_
                                                                    "submit"
                                                                ]
                                                                [ Html.text
                                                                    "Submit"
                                                                ]
                                                           ]
                                                    )
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "id"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string |> Control.id "my-string"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "int"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__int_0.init
                                |> test__Control__int_0.update "1.5"
                                |> test__Control__int_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err [ "Must be a whole number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__int_0.init
                                |> test__Control__int_0.update "123"
                                |> test__Control__int_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok 123)
                        )
                    ]
                ]
            , Test.describe
                "label"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                                        |> Control.label "Enter your name"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "layout"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord))) (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord))) MyRecord__Control__layout_0
                                unused =
                                    Control.record
                                        (\foo bar -> { foo = foo, bar = bar })
                                        |> Control.field .foo Control.string
                                        |> Control.field .bar Control.int
                                        |> Control.endRecord
                                        |> Control.layout
                                            wizard__Control__layout_0
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "list"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.List_ Basics.Bool) (Control.List_ Basics.Bool) (List Basics.Bool)
                                unused =
                                    Control.list Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "map"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                            in
                            Expect.pass
                        )
                    , Test.test
                        "1"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Mapping String.String) (Control.Mapping String.String) Id__Control__map_0
                                unused =
                                    Control.int
                                        |> Control.map
                                            { convert =
                                                \i -> Id__Control__map_0 i
                                            , revert =
                                                \(Id__Control__map_0 i) -> i
                                            }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "maybe"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                            in
                            Expect.pass
                        )
                    , Test.test
                        "1"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Maybe_ String.String) (Control.Maybe_ String.String) (Maybe.Maybe Basics.Int)
                                unused =
                                    Control.maybe Control.int
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "name"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string |> Control.name "My string"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "noteIf"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__noteIf_0.init
                                |> test__Control__noteIf_0.update "0"
                                |> test__Control__noteIf_0.quick.feedback
                            )
                                |> Expect.equal
                                    [ "Maybe this should be greater than zero?"
                                    ]
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__noteIf_0.init
                                |> test__Control__noteIf_0.update "1"
                                |> test__Control__noteIf_0.quick.feedback
                            )
                                |> Expect.equal []
                        )
                    ]
                ]
            , Test.describe
                "noteIfWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__noteIfWithContext_0.init
                                |> test__Control__noteIfWithContext_0.update "0"
                                |> test__Control__noteIfWithContext_0.quick.feedback
                            )
                                |> Expect.equal
                                    [ "This value is below the recommended minimum - are you sure?"
                                    ]
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__noteIfWithContext_0.init
                                |> test__Control__noteIfWithContext_0.update "1"
                                |> test__Control__noteIfWithContext_0.quick.feedback
                            )
                                |> Expect.equal []
                        )
                    ]
                ]
            , Test.describe
                "record"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__record_0.init
                                |> test__Control__record_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Err [ "Must be a whole number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            (test__Control__record_0.init
                                |> test__Control__record_0.prefill
                                    { foo = "!!!", bar = 42 }
                                |> test__Control__record_0.quick.submit
                            )
                                |> Expect.equal
                                    (Result.Ok { foo = "!!!", bar = 42 })
                        )
                    ]
                ]
            , Test.describe
                "result"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Result_ String.String Basics.Bool) (Control.Result_ String.String Basics.Bool) (Result.Result String.String Basics.Bool)
                                unused =
                                    Control.result Control.string Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "sandbox"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Platform.Program () (Control.State String.String) (Control.Delta String.String)
                                unused =
                                    Control.sandbox
                                        { control = Control.int
                                        , outputToString = Debug.toString
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "set"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Set_ String.String) (Control.Set_ String.String) (Set.Set String.String)
                                unused =
                                    Control.set Control.string
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "simpleForm"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Form String.String String.String Basics.Int Msg__Control__simpleForm_0
                                unused =
                                    Control.simpleForm
                                        { control = Control.int
                                        , onUpdate =
                                            FormUpdated__Control__simpleForm_0
                                        , onSubmit =
                                            FormSubmitted__Control__simpleForm_0
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "string"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            (test__Control__string_0.init
                                |> test__Control__string_0.update "hello"
                                |> test__Control__string_0.quick.submit
                            )
                                |> Expect.equal (Result.Ok "hello")
                        )
                    ]
                ]
            , Test.describe
                "triple"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Triple String.String Basics.Bool String.String) (Control.Triple String.String Basics.Bool String.String) ( String.String, Basics.Bool, Basics.Float )
                                unused =
                                    Control.triple
                                        Control.string
                                        Control.bool
                                        Control.float
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "tuple"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Tuple String.String Basics.Bool) (Control.Tuple String.String Basics.Bool) ( String.String, Basics.Bool )
                                unused =
                                    Control.tuple Control.string Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "wrapView"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.wrapView
                                            (\view -> [ Html.div [] view ])
                            in
                            Expect.pass
                        )
                    ]
                ]
            ]
        ]


passwordControl__Control__Header_0 =
    Control.record
        (\password confirmation ->
            { password = password, confirmation = confirmation }
        )
        |> Control.field .password Control.string
        |> Control.field
            .confirmation
            (Control.string
                |> Control.respond
                    { alert = "passwords-do-not-match"
                    , fail = Basics.True
                    , message = "Passwords must match"
                    , class = "control-feedback-fail"
                    }
            )
        |> Control.endRecord
        |> Control.alertIf
            (\{ password, confirmation } -> password /= confirmation)
            "passwords-do-not-match"


test__Control__Header_0 =
    Control.toTest passwordControl__Control__Header_0


myString__Control__alertAtIndexes_0 =
    Control.string
        |> Control.respond
            { alert = "no-hello-world"
            , fail = Basics.True
            , message = "List can't start with \"hello\" and \"world\"."
            , class = "control-feedback-fail"
            }


myList__Control__alertAtIndexes_0 =
    Control.list myString__Control__alertAtIndexes_0
        |> Control.alertAtIndexes
            (\list_ ->
                case list_ of
                    "hello" :: "world" :: _ ->
                        [ 0, 1 ]

                    _ ->
                        []
            )
            "no-hello-world"


test__Control__alertAtIndexes_0 =
    Control.toTest myList__Control__alertAtIndexes_0


test__Control__bool_0 =
    Control.toTest Control.bool


test__Control__char_0 =
    Control.toTest Control.char


oneAndHello__Control__default_0 =
    Control.tuple Control.int Control.string |> Control.default ( 1, "hello" )


test__Control__default_0 =
    Control.toTest oneAndHello__Control__default_0


type CounterDelta__Control__define_0
    = Increment__Control__define_0
    | Decrement__Control__define_0


counterControl__Control__define_0 : Control.Control context Basics.Int CounterDelta__Control__define_0 Basics.Int
counterControl__Control__define_0 =
    Control.define
        { blank = ( 0, Platform.Cmd.none )
        , prefill = \n -> ( n, Platform.Cmd.none )
        , update =
            \delta state ->
                case delta of
                    Increment__Control__define_0 ->
                        ( state + 1, Platform.Cmd.none )

                    Decrement__Control__define_0 ->
                        ( state - 1, Platform.Cmd.none )
        , view =
            \{ state, name, id, label, class } ->
                [ Html.div
                    [ Html.Attributes.class class ]
                    [ Html.label [ Html.Attributes.for id ] [ Html.text label ]
                    , Html.div
                        [ Html.Attributes.id id, Html.Attributes.name name ]
                        [ Html.button
                            [ Html.Attributes.type_ "button"
                            , Html.Events.onClick Increment__Control__define_0
                            ]
                            [ Html.text "+" ]
                        , Html.div [] [ Html.text <| String.fromInt state ]
                        , Html.button
                            [ Html.Attributes.type_ "button"
                            , Html.Events.onClick Decrement__Control__define_0
                            ]
                            [ Html.text "-" ]
                        ]
                    ]
                ]
        , subscriptions = \state -> Platform.Sub.none
        , parse = Result.Ok
        , label = "Counter"
        }


test__Control__define_0 =
    Control.toTest counterControl__Control__define_0


type Colour__Control__enum_0
    = Red__Control__enum_0
    | Green__Control__enum_0
    | Blue__Control__enum_0


colourControl__Control__enum_0 : Control.Control context Colour__Control__enum_0 Colour__Control__enum_0 Colour__Control__enum_0
colourControl__Control__enum_0 =
    Control.enum
        ( "Red", Red__Control__enum_0 )
        ( "Green", Green__Control__enum_0 )
        [ ( "Blue", Blue__Control__enum_0 ) ]


test__Control__enum_0 =
    Control.toTest colourControl__Control__enum_0


positiveInt__Control__failIf_0 =
    Control.int
        |> Control.failIf (\x -> x < 1) "This must be greater than zero!"


test__Control__failIf_0 =
    Control.toTest positiveInt__Control__failIf_0


type alias Context__Control__failIfWithContext_0 =
    { minimumValue : Basics.Int }


positiveInt__Control__failIfWithContext_0 =
    Control.int
        |> Control.failIfWithContext
            (\context x -> x < context.minimumValue)
            "This is less than the minimum value!"


test__Control__failIfWithContext_0 =
    positiveInt__Control__failIfWithContext_0
        |> Control.toTestWithContext { minimumValue = 1 }


test__Control__float_0 =
    Control.toTest Control.float


type Msg__Control__form_0
    = FormUpdated__Control__form_0 (Control.Delta String.String)
    | FormSubmitted__Control__form_0


test__Control__int_0 =
    Control.toTest Control.int


type alias MyRecord__Control__layout_0 =
    { foo : String.String, bar : Basics.Int }


wizard__Control__layout_0 config subcontrols =
    let
        currentPage =
            config.selected

        totalPages =
            List.length subcontrols

        currentPageView =
            subcontrols
                |> List.filter (\{ index } -> index == currentPage)
                |> List.map .html
                |> List.concat

        nextClicked =
            config.selectMsg (currentPage + 1)

        backClicked =
            config.selectMsg (currentPage - 1)

        navigationButton txt msg =
            Html.button
                [ Html.Attributes.type_ "button", Html.Events.onClick msg ]
                [ Html.text txt ]
    in
    [ Html.div
        [ Html.Attributes.id config.id, Html.Attributes.class config.class ]
        ([ Html.h1 [] [ Html.text "Wizard!" ]
         , navigationButton "Back" backClicked
         , Html.text
            (String.join
                " "
                [ "page"
                , String.fromInt currentPage
                , "of"
                , String.fromInt totalPages
                ]
            )
         , navigationButton "Next" nextClicked
         ]
            ++ currentPageView
        )
    ]


type Id__Control__map_0
    = Id__Control__map_0 Basics.Int


positiveInt__Control__noteIf_0 =
    Control.int
        |> Control.noteIf
            (\x -> x < 1)
            "Maybe this should be greater than zero?"


test__Control__noteIf_0 =
    Control.toTest positiveInt__Control__noteIf_0


type alias Context__Control__noteIfWithContext_0 =
    { recommendedMinimumValue : Basics.Int }


boundedInt__Control__noteIfWithContext_0 =
    Control.int
        |> Control.noteIfWithContext
            (\context x -> x < context.recommendedMinimumValue)
            "This value is below the recommended minimum - are you sure?"


test__Control__noteIfWithContext_0 =
    boundedInt__Control__noteIfWithContext_0
        |> Control.toTestWithContext { recommendedMinimumValue = 1 }


type alias MyRecord__Control__record_0 =
    { foo : String.String, bar : Basics.Int }


myRecordControl__Control__record_0 =
    Control.record (\foo bar -> { foo = foo, bar = bar })
        |> Control.field .foo Control.string
        |> Control.field .bar Control.int
        |> Control.endRecord


test__Control__record_0 =
    Control.toTest myRecordControl__Control__record_0


type Msg__Control__simpleForm_0
    = FormUpdated__Control__simpleForm_0 (Control.Delta String.String)
    | FormSubmitted__Control__simpleForm_0


test__Control__string_0 =
    Control.toTest Control.string
