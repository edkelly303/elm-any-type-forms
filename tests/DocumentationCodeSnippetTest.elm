module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)
-}

import Control
import Dict
import Expect
import Html
import Html.Attributes
import Html.Events
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "Control"
            [ Test.describe
                "alertAtIndexes"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control =
                                    myList__Control__alertAtIndexes_0
                                        |> Control.default [ "hello", "world" ]
                                , deltas = []
                                }
                                |> Expect.equal
                                    (Result.Err
                                        [ "The first two items in the list must not be \"hello\" and \"world\"."
                                        , "The first two items in the list must not be \"hello\" and \"world\"."
                                        ]
                                    )
                        )
                    ]
                ]
            , Test.describe
                "bool"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.bool
                                , deltas =
                                    [ Basics.True, Basics.False, Basics.True ]
                                }
                                |> Expect.equal (Result.Ok Basics.True)
                        )
                    ]
                ]
            , Test.describe
                "char"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test { control = Control.char, deltas = [] }
                                |> Expect.equal
                                    (Result.Err [ "Must not be blank" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.test
                                { control = Control.char, deltas = [ "hello" ] }
                                |> Expect.equal
                                    (Result.Err
                                        [ "Must be exactly one character" ]
                                    )
                        )
                    , Test.test
                        "2"
                        (\() ->
                            Control.test
                                { control = Control.char, deltas = [ "h" ] }
                                |> Expect.equal (Result.Ok 'h')
                        )
                    ]
                ]
            , Test.describe
                "dict"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = myDictControl__Control__dict_0
                                , deltas = []
                                }
                                |> Expect.equal (Result.Ok Dict.empty)
                        )
                    ]
                ]
            , Test.describe
                "enum"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = colourControl__Control__enum_0
                                , deltas =
                                    [ Red__Control__enum_0
                                    , Blue__Control__enum_0
                                    , Red__Control__enum_0
                                    , Green__Control__enum_0
                                    ]
                                }
                                |> Expect.equal
                                    (Result.Ok Green__Control__enum_0)
                        )
                    ]
                ]
            , Test.describe
                "failIfWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.testWithContext
                                { control =
                                    positiveInt__Control__failIfWithContext_0
                                , context = { minimumValue = 1 }
                                , deltas = [ "0" ]
                                }
                                |> Expect.equal
                                    (Result.Err
                                        [ "This is less than the minimum value!"
                                        ]
                                    )
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.testWithContext
                                { control =
                                    positiveInt__Control__failIfWithContext_0
                                , context = { minimumValue = 1 }
                                , deltas = [ "2" ]
                                }
                                |> Expect.equal (Result.Ok 2)
                        )
                    ]
                ]
            , Test.describe
                "float"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.float
                                , deltas = [ "hello" ]
                                }
                                |> Expect.equal
                                    (Result.Err [ "Must be a number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.test
                                { control = Control.float, deltas = [ "1.0" ] }
                                |> Expect.equal (Result.Ok 1)
                        )
                    ]
                ]
            , Test.describe
                "form"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Form String.String String.String Basics.Int Msg__Control__form_0
                                unused =
                                    Control.form
                                        { control = Control.int
                                        , onUpdate =
                                            FormUpdated__Control__form_0
                                        , view =
                                            \controlView ->
                                                Html.form
                                                    [ Html.Events.onSubmit
                                                        FormSubmitted__Control__form_0
                                                    ]
                                                    (controlView
                                                        ++ [ Html.button
                                                                [ Html.Attributes.type_
                                                                    "submit"
                                                                ]
                                                                [ Html.text
                                                                    "Submit"
                                                                ]
                                                           ]
                                                    )
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "int"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.int, deltas = [ "1.5" ] }
                                |> Expect.equal
                                    (Result.Err [ "Must be a whole number" ])
                        )
                    , Test.test
                        "1"
                        (\() ->
                            Control.test
                                { control = Control.int, deltas = [ "123" ] }
                                |> Expect.equal (Result.Ok 123)
                        )
                    ]
                ]
            , Test.describe
                "simpleForm"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Form String.String String.String Basics.Int Msg__Control__simpleForm_0
                                unused =
                                    Control.simpleForm
                                        { control = Control.int
                                        , onUpdate =
                                            FormUpdated__Control__simpleForm_0
                                        , onSubmit =
                                            FormSubmitted__Control__simpleForm_0
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "string"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            Control.test
                                { control = Control.string
                                , deltas = [ "hello" ]
                                }
                                |> Expect.equal (Result.Ok "hello")
                        )
                    ]
                ]
            ]
        ]


myString__Control__alertAtIndexes_0 =
    Control.string
        |> Control.respond
            { alert = "no-hello-world"
            , fail = Basics.True
            , message =
                "The first two items in the list must not be \"hello\" and \"world\"."
            , class = "control-feedback-fail"
            }


myList__Control__alertAtIndexes_0 =
    Control.list myString__Control__alertAtIndexes_0
        |> Control.alertAtIndexes
            (\list_ ->
                case list_ of
                    "hello" :: "world" :: _ ->
                        [ 0, 1 ]

                    _ ->
                        []
            )
            "no-hello-world"


myDictControl__Control__dict_0 =
    Control.dict Control.int Control.string


type Colour__Control__enum_0
    = Red__Control__enum_0
    | Green__Control__enum_0
    | Blue__Control__enum_0


colourControl__Control__enum_0 : Control.Control context Colour__Control__enum_0 Colour__Control__enum_0 Colour__Control__enum_0
colourControl__Control__enum_0 =
    Control.enum
        ( "Red", Red__Control__enum_0 )
        ( "Green", Green__Control__enum_0 )
        [ ( "Blue", Blue__Control__enum_0 ) ]


type alias Context__Control__failIfWithContext_0 =
    { minimumValue : Basics.Int }


positiveInt__Control__failIfWithContext_0 =
    Control.int
        |> Control.failIfWithContext
            (\context x -> x < context.minimumValue)
            "This is less than the minimum value!"


type Msg__Control__form_0
    = FormUpdated__Control__form_0 (Control.Delta String.String)
    | FormSubmitted__Control__form_0


type Msg__Control__simpleForm_0
    = FormUpdated__Control__simpleForm_0 (Control.Delta String.String)
    | FormSubmitted__Control__simpleForm_0
