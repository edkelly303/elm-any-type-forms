module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)
-}

import Array
import Control
import Dict
import Expect
import Html
import Html.Attributes
import Html.Events
import Platform.Cmd
import Platform.Sub
import Set
import Test
import Time


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "Control"
            [ Test.describe
                "module header"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused :
                                    Control.Control
                                        context
                                        (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord)))
                                        (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord)))
                                        { password :
                                            String.String
                                        , confirmation : String.String
                                        }
                                unused =
                                    Control.record
                                        (\password confirmation ->
                                            { password = password
                                            , confirmation = confirmation
                                            }
                                        )
                                        |> Control.field
                                            .password
                                            Control.string
                                        |> Control.field
                                            .confirmation
                                            (Control.string
                                                |> Control.respond
                                                    { alert =
                                                        "passwords-do-not-match"
                                                    , fail = Basics.True
                                                    , message =
                                                        "Passwords must match"
                                                    , class =
                                                        "control-feedback-fail"
                                                    }
                                            )
                                        |> Control.endRecord
                                        |> Control.alertIf
                                            (\{ password, confirmation } ->
                                                password /= confirmation
                                            )
                                            "passwords-do-not-match"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "FormWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control Context__Control__FormWithContext_0 String.String String.String String.String
                                unused =
                                    userControl__Control__FormWithContext_0
                            in
                            Expect.pass
                        )
                    , Test.test
                        "1"
                        (\() ->
                            let
                                unused : Control.FormWithContext Context__Control__FormWithContext_0 String.String String.String String.String Msg__Control__FormWithContext_0
                                unused =
                                    form__Control__FormWithContext_0
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "alertAtIndexes"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.List_ String.String) (Control.List_ String.String) (List String.String)
                                unused =
                                    Control.list
                                        myString__Control__alertAtIndexes_0
                                        |> Control.alertAtIndexes
                                            (\list_ ->
                                                case list_ of
                                                    "hello" :: "world" :: _ ->
                                                        [ 0, 1 ]

                                                    _ ->
                                                        []
                                            )
                                            "no-hello-world"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "alertIf"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Tuple String.String String.String) (Control.Tuple String.String String.String) ( Basics.Int, String.String )
                                unused =
                                    Control.tuple Control.int Control.string
                                        |> Control.alertIf
                                            (\( x, y ) -> x > 0)
                                            "int-greater-than-zero"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "array"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Array_ String.String) (Control.Array_ String.String) (Array.Array Basics.Int)
                                unused =
                                    Control.array Control.int
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "bool"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context Basics.Bool Basics.Bool Basics.Bool
                                unused =
                                    Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "char"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Char.Char
                                unused =
                                    Control.char
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "class"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                                        |> Control.class "important"
                                        |> Control.class "no-really"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "classList"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                                        |> Control.classList
                                            [ ( "important", Basics.True )
                                            , ( "no-really", Basics.True )
                                            , ( "ignore-me", Basics.False )
                                            ]
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "customType"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.CustomType (Control.Variant Control.EndVariant (Control.Variant (Control.Arg String.String Control.EndVariant) (Control.Variant (Control.Arg String.String (Control.Arg String.String Control.EndVariant)) Control.EndCustomType)))) (Control.CustomType (Control.Variant Control.EndVariant (Control.Variant (Control.Arg String.String Control.EndVariant) (Control.Variant (Control.Arg String.String (Control.Arg String.String Control.EndVariant)) Control.EndCustomType)))) MyCustomType__Control__customType_0
                                unused =
                                    Control.customType
                                        (\noArgs oneArg twoArgs variant ->
                                            case variant of
                                                NoArgs__Control__customType_0 ->
                                                    noArgs

                                                OneArg__Control__customType_0 arg1 ->
                                                    oneArg arg1

                                                TwoArgs__Control__customType_0 arg1 arg2 ->
                                                    twoArgs arg1 arg2
                                        )
                                        |> Control.variant0
                                            "NoArgs"
                                            NoArgs__Control__customType_0
                                        |> Control.variant1
                                            "OneArg"
                                            OneArg__Control__customType_0
                                            Control.string
                                        |> Control.variant2
                                            "TwoArgs"
                                            TwoArgs__Control__customType_0
                                            Control.int
                                            Control.float
                                        |> Control.endCustomType
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "debounce"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string |> Control.debounce 2000
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "default"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Tuple String.String String.String) (Control.Tuple String.String String.String) ( Basics.Int, String.String )
                                unused =
                                    Control.tuple Control.int Control.string
                                        |> Control.default ( 1, "hello" )
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "define"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context Basics.Int CounterDelta__Control__define_0 Basics.Int
                                unused =
                                    Control.define
                                        { blank = ( 0, Platform.Cmd.none )
                                        , prefill =
                                            \n -> ( n, Platform.Cmd.none )
                                        , update =
                                            \delta state ->
                                                case delta of
                                                    Increment__Control__define_0 ->
                                                        ( state + 1
                                                        , Platform.Cmd.none
                                                        )

                                                    Decrement__Control__define_0 ->
                                                        ( state - 1
                                                        , Platform.Cmd.none
                                                        )
                                        , view =
                                            \{ state, name, id, label, class } ->
                                                [ Html.div
                                                    [ Html.Attributes.class
                                                        class
                                                    ]
                                                    [ Html.label
                                                        [ Html.Attributes.for id
                                                        ]
                                                        [ Html.text label ]
                                                    , Html.div
                                                        [ Html.Attributes.id id
                                                        , Html.Attributes.name
                                                            name
                                                        ]
                                                        [ Html.button
                                                            [ Html.Attributes.type_
                                                                "button"
                                                            , Html.Events.onClick
                                                                Increment__Control__define_0
                                                            ]
                                                            [ Html.text "+" ]
                                                        , Html.div
                                                            []
                                                            [ Html.text <|
                                                                String.fromInt
                                                                    state
                                                            ]
                                                        , Html.button
                                                            [ Html.Attributes.type_
                                                                "button"
                                                            , Html.Events.onClick
                                                                Decrement__Control__define_0
                                                            ]
                                                            [ Html.text "-" ]
                                                        ]
                                                    ]
                                                ]
                                        , subscriptions =
                                            \state -> Platform.Sub.none
                                        , parse = Result.Ok
                                        , label = "Counter"
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "defineWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control Context__Control__defineWithContext_0 Basics.Int CounterDelta__Control__defineWithContext_0 Basics.Int
                                unused =
                                    Control.defineWithContext
                                        { blank = ( 0, Platform.Cmd.none )
                                        , prefill =
                                            \x -> ( x, Platform.Cmd.none )
                                        , update =
                                            \context delta state ->
                                                ( case delta of
                                                    Increment__Control__defineWithContext_0 ->
                                                        if
                                                            state
                                                                < context.maxCount
                                                        then
                                                            state + 1

                                                        else
                                                            state

                                                    Decrement__Control__defineWithContext_0 ->
                                                        if
                                                            state
                                                                > context.minCount
                                                        then
                                                            state - 1

                                                        else
                                                            state
                                                , Platform.Cmd.none
                                                )
                                        , view =
                                            \context { state, name, id, label, class } ->
                                                [ Html.div
                                                    [ Html.Attributes.class
                                                        class
                                                    ]
                                                    [ Html.label
                                                        [ Html.Attributes.for id
                                                        ]
                                                        [ Html.text label ]
                                                    , Html.div
                                                        [ Html.Attributes.id id
                                                        , Html.Attributes.name
                                                            name
                                                        ]
                                                        [ Html.button
                                                            [ Html.Attributes.type_
                                                                "button"
                                                            , Html.Events.onClick
                                                                Increment__Control__defineWithContext_0
                                                            , Html.Attributes.disabled
                                                                (state
                                                                    >= context.maxCount
                                                                )
                                                            ]
                                                            [ Html.text "+" ]
                                                        , Html.div
                                                            []
                                                            [ Html.text <|
                                                                String.fromInt
                                                                    state
                                                            ]
                                                        , Html.button
                                                            [ Html.Attributes.type_
                                                                "button"
                                                            , Html.Events.onClick
                                                                Decrement__Control__defineWithContext_0
                                                            , Html.Attributes.disabled
                                                                (state
                                                                    <= context.minCount
                                                                )
                                                            ]
                                                            [ Html.text "-" ]
                                                        ]
                                                    ]
                                                ]
                                        , subscriptions =
                                            \context state ->
                                                if state > context.maxCount then
                                                    Time.every
                                                        1000
                                                        (\_ ->
                                                            Decrement__Control__defineWithContext_0
                                                        )

                                                else if state < context.minCount then
                                                    Time.every
                                                        1000
                                                        (\_ ->
                                                            Increment__Control__defineWithContext_0
                                                        )

                                                else
                                                    Platform.Sub.none
                                        , parse =
                                            \context state ->
                                                if
                                                    state
                                                        > context.maxCount
                                                        || state
                                                        < context.minCount
                                                then
                                                    Result.Err
                                                        [ "count is out of bounds!"
                                                        ]

                                                else
                                                    Result.Ok state
                                        , label = "Counter"
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "dict"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Dict_ String.String Basics.Bool) (Control.Dict_ String.String Basics.Bool) (Dict.Dict String.String Basics.Bool)
                                unused =
                                    Control.dict Control.string Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "endRecord"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Record (Control.Field String.String Control.EndRecord)) (Control.Record (Control.Field String.String Control.EndRecord)) Hello__Control__endRecord_0
                                unused =
                                    Control.record Hello__Control__endRecord_0
                                        |> Control.field .hello Control.string
                                        |> Control.endRecord
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "enum"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context Colour__Control__enum_0 Colour__Control__enum_0 Colour__Control__enum_0
                                unused =
                                    Control.enum
                                        ( "Red", Red__Control__enum_0 )
                                        ( "Green", Green__Control__enum_0 )
                                        [ ( "Blue", Blue__Control__enum_0 ) ]
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "failIf"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.failIf
                                            (\x -> x < 1)
                                            "This must be greater than zero!"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "failIfWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control Context__Control__failIfWithContext_0 String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.failIfWithContext
                                            (\context x ->
                                                x < context.minimumValue
                                            )
                                            "This is less than the minimum value!"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "field"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Record (Control.Field String.String Control.EndRecord)) (Control.Record (Control.Field String.String Control.EndRecord)) Hello__Control__field_0
                                unused =
                                    Control.record Hello__Control__field_0
                                        |> Control.field .hello Control.string
                                        |> Control.endRecord
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "float"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Float
                                unused =
                                    Control.float
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "form"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Form String.String String.String Basics.Int Msg__Control__form_0
                                unused =
                                    Control.form
                                        { control = Control.int
                                        , onUpdate =
                                            FormUpdated__Control__form_0
                                        , view =
                                            \controlView ->
                                                Html.form
                                                    [ Html.Events.onSubmit
                                                        FormSubmitted__Control__form_0
                                                    ]
                                                    (controlView
                                                        ++ [ Html.button
                                                                [ Html.Attributes.type_
                                                                    "submit"
                                                                ]
                                                                [ Html.text
                                                                    "Submit"
                                                                ]
                                                           ]
                                                    )
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "id"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string |> Control.id "my-string"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "int"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "label"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                                        |> Control.label "Enter your name"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "layout"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord))) (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord))) MyRecord__Control__layout_0
                                unused =
                                    Control.record
                                        (\foo bar -> { foo = foo, bar = bar })
                                        |> Control.field .foo Control.string
                                        |> Control.field .bar Control.int
                                        |> Control.endRecord
                                        |> Control.layout
                                            wizard__Control__layout_0
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "list"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.List_ Basics.Bool) (Control.List_ Basics.Bool) (List Basics.Bool)
                                unused =
                                    Control.list Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "map"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Mapping String.String) (Control.Mapping String.String) Id__Control__map_0
                                unused =
                                    Control.int
                                        |> Control.map
                                            { convert =
                                                \i -> Id__Control__map_0 i
                                            , revert =
                                                \(Id__Control__map_0 i) -> i
                                            }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "maybe"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Maybe_ String.String) (Control.Maybe_ String.String) (Maybe.Maybe Basics.Int)
                                unused =
                                    Control.maybe Control.int
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "name"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string |> Control.name "My string"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "noteIf"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.noteIf
                                            (\x -> x < 1)
                                            "Maybe this should be greater than zero?"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "noteIfWithContext"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control Context__Control__noteIfWithContext_0 String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.noteIfWithContext
                                            (\context x ->
                                                x
                                                    < context.recommendedMinimumValue
                                            )
                                            "This value is below the recommended minimum - are you sure?"
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "record"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord))) (Control.Record (Control.Field String.String (Control.Field String.String Control.EndRecord))) MyRecord__Control__record_0
                                unused =
                                    Control.record
                                        (\foo bar -> { foo = foo, bar = bar })
                                        |> Control.field .foo Control.string
                                        |> Control.field .bar Control.int
                                        |> Control.endRecord
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "respond"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.respond
                                            { alert = "int-greater-than-zero"
                                            , fail = Basics.True
                                            , message = "Must be less than zero"
                                            , class = "control-feedback-fail"
                                            }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "result"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Result_ String.String Basics.Bool) (Control.Result_ String.String Basics.Bool) (Result.Result String.String Basics.Bool)
                                unused =
                                    Control.result Control.string Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "sandbox"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Platform.Program () (Control.State String.String) (Control.Delta String.String)
                                unused =
                                    Control.sandbox
                                        { control = Control.int
                                        , outputToString = Debug.toString
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "set"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Set_ String.String) (Control.Set_ String.String) (Set.Set String.String)
                                unused =
                                    Control.set Control.string
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "simpleForm"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Form String.String String.String Basics.Int Msg__Control__simpleForm_0
                                unused =
                                    Control.simpleForm
                                        { control = Control.int
                                        , onUpdate =
                                            FormUpdated__Control__simpleForm_0
                                        , onSubmit =
                                            FormSubmitted__Control__simpleForm_0
                                        }
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "string"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String String.String
                                unused =
                                    Control.string
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "triple"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Triple String.String Basics.Bool String.String) (Control.Triple String.String Basics.Bool String.String) ( String.String, Basics.Bool, Basics.Float )
                                unused =
                                    Control.triple
                                        Control.string
                                        Control.bool
                                        Control.float
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "tuple"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.Tuple String.String Basics.Bool) (Control.Tuple String.String Basics.Bool) ( String.String, Basics.Bool )
                                unused =
                                    Control.tuple Control.string Control.bool
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "variant0"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.CustomType (Control.Variant Control.EndVariant Control.EndCustomType)) (Control.CustomType (Control.Variant Control.EndVariant Control.EndCustomType)) Unit__Control__variant0_0
                                unused =
                                    Control.customType
                                        (\unit variant ->
                                            case variant of
                                                Unit__Control__variant0_0 ->
                                                    unit
                                        )
                                        |> Control.variant0
                                            "Unit"
                                            Unit__Control__variant0_0
                                        |> Control.endCustomType
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "variant1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.CustomType (Control.Variant (Control.Arg String.String Control.EndVariant) (Control.Variant (Control.Arg String.String Control.EndVariant) Control.EndCustomType))) (Control.CustomType (Control.Variant (Control.Arg String.String Control.EndVariant) (Control.Variant (Control.Arg String.String Control.EndVariant) Control.EndCustomType))) MyResult__Control__variant1_0
                                unused =
                                    Control.customType
                                        (\ok err variant ->
                                            case variant of
                                                Result.Ok value ->
                                                    ok value

                                                Result.Err error ->
                                                    err error
                                        )
                                        |> Control.variant1
                                            "Ok"
                                            Result.Ok
                                            Control.int
                                        |> Control.variant1
                                            "Err"
                                            Result.Err
                                            Control.string
                                        |> Control.endCustomType
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "variant2"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.CustomType (Control.Variant (Control.Arg String.String (Control.Arg String.String Control.EndVariant)) Control.EndCustomType)) (Control.CustomType (Control.Variant (Control.Arg String.String (Control.Arg String.String Control.EndVariant)) Control.EndCustomType)) Point__Control__variant2_0
                                unused =
                                    Control.customType
                                        (\point variant ->
                                            case variant of
                                                Point__Control__variant2_0 x y ->
                                                    point x y
                                        )
                                        |> Control.variant2
                                            "Point"
                                            Point__Control__variant2_0
                                            Control.float
                                            Control.float
                                        |> Control.endCustomType
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "variant3"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context (Control.CustomType (Control.Variant (Control.Arg String.String (Control.Arg String.String (Control.Arg String.String Control.EndVariant))) Control.EndCustomType)) (Control.CustomType (Control.Variant (Control.Arg String.String (Control.Arg String.String (Control.Arg String.String Control.EndVariant))) Control.EndCustomType)) Point3D__Control__variant3_0
                                unused =
                                    Control.customType
                                        (\point3D variant ->
                                            case variant of
                                                Point3D__Control__variant3_0 x y z ->
                                                    point3D x y z
                                        )
                                        |> Control.variant3
                                            "Point3D"
                                            Point3D__Control__variant3_0
                                            Control.float
                                            Control.float
                                            Control.float
                                        |> Control.endCustomType
                            in
                            Expect.pass
                        )
                    ]
                ]
            , Test.describe
                "wrapView"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\() ->
                            let
                                unused : Control.Control context String.String String.String Basics.Int
                                unused =
                                    Control.int
                                        |> Control.wrapView
                                            (\view -> [ Html.div [] view ])
                            in
                            Expect.pass
                        )
                    ]
                ]
            ]
        ]


type alias User__Control__FormWithContext_0 =
    String.String


type alias Model__Control__FormWithContext_0 =
    { formState : Control.State String.String
    , existingUsers : Set.Set String.String
    }


type alias Context__Control__FormWithContext_0 =
    Set.Set String.String


type Msg__Control__FormWithContext_0
    = FormUpdated__Control__FormWithContext_0 (Control.Delta String.String)
    | FormSubmitted__Control__FormWithContext_0


userControl__Control__FormWithContext_0 =
    Control.string
        |> Control.failIfWithContext
            (\existingUsers newUser -> Set.member newUser existingUsers)
            "User already exists"


form__Control__FormWithContext_0 =
    Control.simpleFormWithContext
        { control = userControl__Control__FormWithContext_0
        , onUpdate = FormUpdated__Control__FormWithContext_0
        , onSubmit = FormSubmitted__Control__FormWithContext_0
        }


update__Control__FormWithContext_0 msg model =
    let
        context =
            model.existingUsers
    in
    case msg of
        FormUpdated__Control__FormWithContext_0 delta ->
            let
                ( formState, cmd ) =
                    form__Control__FormWithContext_0.update
                        context
                        delta
                        model.formState
            in
            ( { model | formState = formState }, cmd )

        FormSubmitted__Control__FormWithContext_0 ->
            let
                ( newFormState, formResult ) =
                    form__Control__FormWithContext_0.submit
                        context
                        model.formState
            in
            case formResult of
                Result.Ok user ->
                    let
                        ( blankFormState, cmd ) =
                            form__Control__FormWithContext_0.blank
                    in
                    ( { model
                        | existingUsers = Set.insert user model.existingUsers
                        , formState = blankFormState
                      }
                    , cmd
                    )

                Result.Err err ->
                    ( { model | formState = newFormState }, Platform.Cmd.none )


myString__Control__alertAtIndexes_0 =
    Control.string
        |> Control.respond
            { alert = "no-hello-world"
            , fail = Basics.True
            , message = "List can't start with \"hello\" and \"world\"."
            , class = "control-feedback-fail"
            }


type MyCustomType__Control__customType_0
    = NoArgs__Control__customType_0
    | OneArg__Control__customType_0 String.String
    | TwoArgs__Control__customType_0 Basics.Int Basics.Float


type CounterDelta__Control__define_0
    = Increment__Control__define_0
    | Decrement__Control__define_0


type CounterDelta__Control__defineWithContext_0
    = Increment__Control__defineWithContext_0
    | Decrement__Control__defineWithContext_0


type alias Context__Control__defineWithContext_0 =
    { maxCount : Basics.Int, minCount : Basics.Int }


type alias Hello__Control__endRecord_0 =
    { hello : String.String }


type Colour__Control__enum_0
    = Red__Control__enum_0
    | Green__Control__enum_0
    | Blue__Control__enum_0


type alias Context__Control__failIfWithContext_0 =
    { minimumValue : Basics.Int }


type alias Hello__Control__field_0 =
    { hello : String.String }


type Msg__Control__form_0
    = FormUpdated__Control__form_0 (Control.Delta String.String)
    | FormSubmitted__Control__form_0


type alias MyRecord__Control__layout_0 =
    { foo : String.String, bar : Basics.Int }


wizard__Control__layout_0 config subcontrols =
    let
        currentPage =
            config.selected

        totalPages =
            List.length subcontrols

        currentPageView =
            subcontrols
                |> List.filter (\{ index } -> index == currentPage)
                |> List.map .html
                |> List.concat

        nextClicked =
            config.selectMsg (currentPage + 1)

        backClicked =
            config.selectMsg (currentPage - 1)

        navigationButton txt msg =
            Html.button
                [ Html.Attributes.type_ "button", Html.Events.onClick msg ]
                [ Html.text txt ]
    in
    [ Html.div
        [ Html.Attributes.id config.id, Html.Attributes.class config.class ]
        ([ Html.h1 [] [ Html.text "Wizard!" ]
         , navigationButton "Back" backClicked
         , Html.text
            (String.join
                " "
                [ "page"
                , String.fromInt currentPage
                , "of"
                , String.fromInt totalPages
                ]
            )
         , navigationButton "Next" nextClicked
         ]
            ++ currentPageView
        )
    ]


type Id__Control__map_0
    = Id__Control__map_0 Basics.Int


type alias Context__Control__noteIfWithContext_0 =
    { recommendedMinimumValue : Basics.Int }


type alias MyRecord__Control__record_0 =
    { foo : String.String, bar : Basics.Int }


type Msg__Control__simpleForm_0
    = FormUpdated__Control__simpleForm_0 (Control.Delta String.String)
    | FormSubmitted__Control__simpleForm_0


type Unit__Control__variant0_0
    = Unit__Control__variant0_0


type alias MyResult__Control__variant1_0 =
    Result.Result String.String Basics.Int


type Point__Control__variant2_0
    = Point__Control__variant2_0 Basics.Float Basics.Float


type Point3D__Control__variant3_0
    = Point3D__Control__variant3_0 Basics.Float Basics.Float Basics.Float
